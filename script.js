// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ –∏ –∑–∞–¥–∞—á
const data = {
    nodes: {
        'root': {
            title: 'Kodama',
            tasks: [], // —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º { id: number, text: string, completed: boolean }
            parentId: null
        },
        'node1': {
            title: '–£–∑–µ–ª 1',
            tasks: [],
            parentId: 'root'
        },
        'node2': {
            title: '–£–∑–µ–ª 2',
            tasks: [],
            parentId: 'root'
        },
        'node3': {
            title: '–£–∑–µ–ª 3',
            tasks: [],
            parentId: 'node1' // –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª –¥–ª—è node1
        }
    },
    nextId: 4, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ nextId —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∑–ª–æ–≤
    taskId: 1 // –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è ID –∑–∞–¥–∞—á
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    const savedData = localStorage.getItem('treeData');
    if (savedData) {
        Object.assign(data, JSON.parse(savedData));
        restoreNodes();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã
        setTimeout(() => {
            Object.entries(data.nodes).forEach(([id, node]) => {
                if (id !== 'root') {
                    const parentId = findParentId(id);
                    if (parentId) {
                        const parentNode = document.getElementById(parentId);
                        const childNode = document.getElementById(id);
                        if (parentNode && childNode) {
                            createConnectionLines(parentNode, childNode);
                        }
                    }
                }
            });
        }, 100);
    }
});

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function restoreNodes() {
    Object.entries(data.nodes).forEach(([id, node]) => {
        if (id !== 'root') {
            const parentId = findParentId(id);
            if (parentId) {
                const parentNode = document.getElementById(parentId);
                const nextLevel = getOrCreateLevel(getNodeLevel(parentId) + 1);
                const newNode = createNode(id, node.title);
                nextLevel.appendChild(newNode);
            }
        }
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π
    requestAnimationFrame(() => {
        setTimeout(updateAllLines, 50);
    });
}

// –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ ID
function findParentId(nodeId) {
    return data.nodes[nodeId]?.parentId || null;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–∞
function createNode(id, title) {
    const node = document.createElement('div');
    node.className = 'node';
    node.id = id;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞
    const parentId = findParentId(id);
    if (parentId) {
        const parentTitle = data.nodes[parentId].title;
        node.dataset.parentTitle = parentTitle;
    }
    
    const content = document.createElement('div');
    content.className = 'node-content';
    
    const titleEl = document.createElement('h3');
    titleEl.textContent = title;
    titleEl.ondblclick = () => showEditModal(id, title); // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
    titleEl.onclick = () => showTasksModal(id); // –ü–æ–∫–∞–∑ –∑–∞–¥–∞—á –ø–æ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É –∫–ª–∏–∫—É
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    titleEl.style.cursor = 'pointer';
    
    const buttons = document.createElement('div');
    buttons.className = 'buttons';
    
    const addBtn = document.createElement('button');
    addBtn.className = 'add-btn';
    addBtn.textContent = '+';
    addBtn.onclick = () => showAddNodeModal(id);
    
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'delete-btn';
    deleteBtn.textContent = '√ó';
    deleteBtn.onclick = () => showDeleteConfirmation(id);
    
    const taskBtn = document.createElement('button');
    taskBtn.className = 'task-btn';
    taskBtn.textContent = '‚úì';
    taskBtn.onclick = () => showTasksModal(id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    buttons.appendChild(addBtn);
    buttons.appendChild(deleteBtn);
    buttons.appendChild(taskBtn);
    content.appendChild(titleEl);
    content.appendChild(buttons);
    node.appendChild(content);
    
    return node;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞
function showAddNodeModal(parentId) {
    const modal = document.getElementById('nodeModal');
    modal.style.display = 'block';
    modal.dataset.parentId = parentId;
    document.getElementById('nodeName').focus();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–¥–∞—á–∞–º–∏
function showTasksModal(nodeId) {
    const modal = document.getElementById('tasksModal');
    modal.style.display = 'block';
    modal.dataset.nodeId = nodeId;
    
    const tasksList = document.getElementById('tasksList');
    const tasks = data.nodes[nodeId].tasks;
    
    tasksList.innerHTML = tasks.map(task => `
        <div class="task-item" data-task-id="${task.id}">
            <div class="task-content">
                <label class="task-checkbox">
                    <input type="checkbox" 
                           ${task.completed ? 'checked' : ''} 
                           onchange="toggleTask('${nodeId}', ${task.id})">
                    <span class="checkmark"></span>
                </label>
                <span class="task-text ${task.completed ? 'completed' : ''}">${task.text}</span>
            </div>
            <button class="delete-task-btn" onclick="deleteTask('${nodeId}', ${task.id})">üóë</button>
        </div>
    `).join('');
    
    document.getElementById('newTask').focus();
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É–∑–µ–ª
function addNode() {
    const modal = document.getElementById('nodeModal');
    const title = document.getElementById('nodeName').value.trim();
    const parentId = modal.dataset.parentId;
    
    if (title) {
        const newId = `node${data.nextId++}`;
        data.nodes[newId] = {
            title: title,
            tasks: [],
            parentId: parentId
        };
        
        const parentNode = document.getElementById(parentId);
        const nextLevel = getOrCreateLevel(getNodeLevel(parentId) + 1);
        const newNode = createNode(newId, title);
        nextLevel.appendChild(newNode);
        
        localStorage.setItem('treeData', JSON.stringify(data));
        closeModal('nodeModal');
        document.getElementById('nodeName').value = '';

        requestAnimationFrame(() => {
            setTimeout(updateAllLines, 50);
        });
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
function addTask() {
    const modal = document.getElementById('tasksModal');
    const nodeId = modal.dataset.nodeId;
    const taskText = document.getElementById('newTask').value.trim();
    
    if (taskText) {
        const task = {
            id: data.taskId++,
            text: taskText,
            completed: false
        };
        
        data.nodes[nodeId].tasks.push(task);
        document.getElementById('newTask').value = '';
        
        localStorage.setItem('treeData', JSON.stringify(data));
        showTasksModal(nodeId);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–∑–ª–∞
function getNodeLevel(nodeId) {
    if (nodeId === 'root') return 0;
    return parseInt(document.getElementById(nodeId).closest('.level').dataset.level);
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
function getOrCreateLevel(level) {
    let levelEl = document.querySelector(`[data-level="${level}"]`);
    if (!levelEl) {
        levelEl = document.createElement('div');
        levelEl.className = 'level';
        levelEl.dataset.level = level;
        document.querySelector('.tree-container').appendChild(levelEl);
    }
    return levelEl;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
function createConnectionLines(parentNode, childNode) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–æ–≤ –≤–µ—Ä—Ö–∞ –∏ –Ω–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const parentRect = parentNode.getBoundingClientRect();
    const childRect = childNode.getBoundingClientRect();
    const containerRect = document.querySelector('.tree-container').getBoundingClientRect();

    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const parentBottom = {
        x: parentRect.left + (parentRect.width / 2) - containerRect.left,
        y: parentRect.bottom - containerRect.top
    };

    const childTop = {
        x: childRect.left + (childRect.width / 2) - containerRect.left,
        y: childRect.top - containerRect.top
    };

    // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é
    const line = document.createElement('div');
    line.className = 'connection-line';

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É –ª–∏–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ–æ—Ä–µ–º—ã –ü–∏—Ñ–∞–≥–æ—Ä–∞
    const length = Math.sqrt(
        Math.pow(childTop.x - parentBottom.x, 2) + 
        Math.pow(childTop.y - parentBottom.y, 2)
    );

    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–∏–∏
    const angle = Math.atan2(
        childTop.y - parentBottom.y,
        childTop.x - parentBottom.x
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å—Ç–∏–ª–µ–π –¥–ª—è –ª–∏–Ω–∏–∏
    line.style.setProperty('--angle', `${angle}rad`);
    line.style.height = '2px';
    line.style.width = `${length}px`;
    line.style.left = `${parentBottom.x}px`;
    line.style.top = `${parentBottom.y}px`;

    document.querySelector('.tree-container').appendChild(line);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏–Ω–∏–π
function updateAllLines() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–∏–Ω–∏–∏
    document.querySelectorAll('.connection-line').forEach(line => line.remove());
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –∏ –µ–≥–æ –ø—Ä—è–º—ã—Ö –ø–æ—Ç–æ–º–∫–æ–≤
    const rootNode = document.querySelector('.root-node');
    const firstLevelNodes = document.querySelectorAll('[data-level="1"] .node');
    firstLevelNodes.forEach(node => {
        createConnectionLines(rootNode, node);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–∑–ª—ã, –∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ
    const otherNodes = document.querySelectorAll('.node:not(.root-node)');
    otherNodes.forEach(node => {
        const parentId = findParentId(node.id);
        const parentNode = document.getElementById(parentId);
        if (parentNode) {
            createConnectionLines(parentNode, node);
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
let resizeTimeout;
window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(updateAllLines, 100);
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ª–∏–Ω–∏–π –≤ CSS
const style = document.createElement('style');
style.textContent = `
    .connection-line {
        position: absolute;
        background-color: #8b4513;
        pointer-events: none;
        transform-origin: 0 0;
    }
`;
document.head.appendChild(style);

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞
function exportStructure() {
    const dataStr = JSON.stringify(data, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = 'kodama-structure.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function importStructure(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const importedData = JSON.parse(e.target.result);
                
                // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —É–∑–ª—ã
                data.nodes = { 
                    'root': {
                        title: 'Kodama',
                        tasks: [],
                        parentId: null
                    }
                };
                
                // –û—á–∏—â–∞–µ–º DOM
                document.querySelectorAll('.level').forEach(level => {
                    if (level.dataset.level !== '1') {
                        level.remove();
                    } else {
                        level.innerHTML = '';
                    }
                });

                // –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —É–∑–ª—ã
                Object.entries(importedData.nodes).forEach(([id, node]) => {
                    if (id !== 'root') {
                        data.nodes[id] = {
                            ...node,
                            parentId: node.parentId || 'root' // –ï—Å–ª–∏ parentId –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–º
                        };
                    }
                });

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π nextId
                data.nextId = Math.max(
                    ...Object.keys(data.nodes)
                        .filter(id => id !== 'root')
                        .map(id => parseInt(id.replace('node', '')))
                ) + 1;

                // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ —É—Ä–æ–≤–µ–Ω—å –∑–∞ —É—Ä–æ–≤–Ω–µ–º
                function buildLevel(parentId, level) {
                    const levelEl = getOrCreateLevel(level);
                    
                    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–∑–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    Object.entries(data.nodes).forEach(([id, node]) => {
                        if (node.parentId === parentId) {
                            const newNode = createNode(id, node.title);
                            levelEl.appendChild(newNode);
                        }
                    });
                }

                // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                buildLevel('root', 1);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem('treeData', JSON.stringify(data));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏
                requestAnimationFrame(() => {
                    setTimeout(updateAllLines, 50);
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞');
            }
        };
        reader.readAsText(file);
    }
    event.target.value = '';
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showClearConfirmation() {
    document.getElementById('clearModal').style.display = 'block';
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function clearAllData() {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data.nodes = {
        'root': {
            title: 'Kodama',
            tasks: [],
            parentId: null
        }
    };
    data.nextId = 1;

    // –û—á–∏—â–∞–µ–º DOM
    document.querySelectorAll('.level').forEach(level => {
        if (level.dataset.level !== '1') {
            level.remove();
        } else {
            level.innerHTML = '';
        }
    });

    // –û—á–∏—â–∞–µ–º –ª–∏–Ω–∏–∏
    document.querySelectorAll('.connection-line').forEach(line => line.remove());

    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.setItem('treeData', JSON.stringify(data));

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal('clearModal');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
function showEditModal(id, currentTitle) {
    const modal = document.getElementById('editModal');
    const input = document.getElementById('editNodeName');
    input.value = currentTitle;
    modal.dataset.nodeId = id;
    modal.style.display = 'block';
    input.focus();
    input.select();
}

function editNode() {
    const modal = document.getElementById('editModal');
    const nodeId = modal.dataset.nodeId;
    const newTitle = document.getElementById('editNodeName').value.trim();
    
    if (newTitle) {
        data.nodes[nodeId].title = newTitle;
        document.querySelector(`#${nodeId} h3`).textContent = newTitle;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª—è —É –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
        Object.entries(data.nodes).forEach(([id, node]) => {
            if (node.parentId === nodeId) {
                const childNode = document.getElementById(id);
                if (childNode) {
                    childNode.dataset.parentTitle = newTitle;
                }
            }
        });
        
        localStorage.setItem('treeData', JSON.stringify(data));
        closeModal('editModal');
    }
}

function showDeleteConfirmation(nodeId) {
    const modal = document.getElementById('deleteModal');
    modal.dataset.nodeId = nodeId;
    modal.style.display = 'block';
}

function deleteNode() {
    const modal = document.getElementById('deleteModal');
    const nodeId = modal.dataset.nodeId;
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
    function deleteChildren(parentId) {
        Object.entries(data.nodes).forEach(([id, node]) => {
            if (node.parentId === parentId) {
                deleteChildren(id);
                delete data.nodes[id];
                const nodeEl = document.getElementById(id);
                if (nodeEl) nodeEl.remove();
            }
        });
    }
    
    // –£–¥–∞–ª—è–µ–º —É–∑–µ–ª –∏ –µ–≥–æ –¥–µ—Ç–µ–π
    deleteChildren(nodeId);
    delete data.nodes[nodeId];
    const nodeEl = document.getElementById(nodeId);
    if (nodeEl) nodeEl.remove();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    updateAllLines();
    localStorage.setItem('treeData', JSON.stringify(data));
    closeModal('deleteModal');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
function toggleTask(nodeId, taskId) {
    const task = data.nodes[nodeId].tasks.find(t => t.id === taskId);
    if (task) {
        task.completed = !task.completed;
        const taskText = document.querySelector(`.task-item[data-task-id="${taskId}"] .task-text`);
        taskText.classList.toggle('completed');
        localStorage.setItem('treeData', JSON.stringify(data));
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function deleteTask(nodeId, taskId) {
    data.nodes[nodeId].tasks = data.nodes[nodeId].tasks.filter(t => t.id !== taskId);
    localStorage.setItem('treeData', JSON.stringify(data));
    showTasksModal(nodeId);
}
